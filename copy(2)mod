<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>SIH — URL VAPT Simulator (Pro) — Stable Bulk Delete Fix</title>

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<style>
  :root{
    --bg:#071017; --panel:#0f1a23; --accent:#00d47a; --accent-2:#00aaff;
    --muted:#9aa7b0; --high:#ff6b6b; --med:#ffb86b; --low:#7ef0b5;
    --light-bg:#f6f8fb; --light-panel:#fff; --light-text:#111;
    --radius:10px;
  }
  html,body{height:100%; margin:0; padding:0; font-family:Inter, system-ui, "Segoe UI", Roboto, Arial; background:var(--bg); color:#e6eef2;}
  header{background:linear-gradient(90deg,#062126,#0b2730); padding:12px; border-bottom:1px solid rgba(255,255,255,0.04);}
  header .title{color:var(--accent); font-size:1.25rem; margin:0;}
  .container-main{max-width:1200px; margin:18px auto; padding:12px;}
  .card-panel{background:linear-gradient(180deg,var(--panel), #07151a); border-radius:var(--radius); padding:12px; border:1px solid rgba(255,255,255,0.03); margin-bottom:12px;}
  .btn-accent{background:var(--accent); color:#062224; border:0; transition:all .18s;}
  .btn-accent:hover{background:var(--accent-2); color:#fff;}
  .small-muted{color:var(--muted);}
  input, textarea, select{border-radius:8px; transition:box-shadow .12s;}
  input:focus,textarea:focus,select:focus{box-shadow:0 0 8px rgba(0,212,122,0.12); outline:none; border-color:var(--accent);}
  table thead th{background:#071e26;color:var(--accent);}
  table tbody tr:hover{background: rgba(0,255,120,0.06); cursor:pointer;}
  .badge-high{background:var(--high); color:#fff;}
  .badge-med{background:var(--med); color:#111;}
  .badge-low{background:var(--low); color:#062224;}
  .nowrap{white-space:nowrap; overflow:hidden; text-overflow:ellipsis;}
  .muted-small{font-size:0.85rem;color:var(--muted);}
  .tooltip-inline{font-size:0.85rem;color:var(--muted); margin-left:8px;}
  .col-actions{min-width:140px;}
  .editable-note{background:transparent; border:0; color:inherit; resize:none; width:100%;}
  .hidden{display:none!important;}
  .controls-row{display:flex; align-items:flex-start; gap:10px; flex-wrap:wrap;}
  .search-input{min-width:220px; max-width:420px;}
  .chip{display:inline-block;padding:6px 10px;border-radius:999px;background:rgba(255,255,255,0.03);color:var(--muted);margin:4px; font-size:0.85rem;}
  body.light-mode{background:var(--light-bg); color:var(--light-text);}
  body.light-mode .card-panel{background:var(--light-panel); color:var(--light-text);}
  body.light-mode header{background:linear-gradient(90deg,#e9f1ff,#eef8ff);}
  body.light-mode .btn-accent{background:var(--light-accent); color:#fff;}
  @media(max-width:900px){ .controls-row{flex-direction:column; align-items:stretch;} .col-actions{min-width:80px;} .table-wrap{overflow:auto;} }
  .help{font-size:0.85rem;color:var(--muted);} .mono{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, "Roboto Mono", monospace;}
  .kicker{font-size:0.95rem;color:var(--muted); margin-bottom:6px;}
  .chart-box{height:240px; position:relative;}
  .icon-btn{padding:6px 8px;border-radius:8px;}
</style>
</head>
<body>

<header>
  <div class="container-main d-flex justify-content-between align-items-center">
    <div>
      <h1 class="title">SIH — URL VAPT Simulator (Pro)</h1>
      <div class="small-muted">Educational & demo only — run locally</div>
    </div>
    <div class="d-flex align-items-center" style="gap:8px;">
      <button id="themeToggle" class="btn btn-outline-light btn-sm" title="Toggle light/dark mode">Toggle Theme</button>
      <button class="btn btn-outline-light btn-sm" data-bs-toggle="modal" data-bs-target="#ethicsModal">Ethics</button>
    </div>
  </div>
</header>

<div class="container-main">

  <!-- Controls -->
  <section class="card-panel" aria-labelledby="controls-heading">
    <h2 id="controls-heading" class="kicker">Scan Controls</h2>
    <div class="controls-row">
      <textarea id="urlInput" rows="3" class="form-control" placeholder="Enter URLs (comma or newline separated)"></textarea>

      <select id="scenario" class="form-select" style="max-width:220px;">
        <option value="">Scenario Bias (optional)</option>
        <option>SQLi heavy</option>
        <option>XSS heavy</option>
        <option>SSRF focused</option>
        <option>Dir Traversal focused</option>
        <option>RCE heavy</option>
      </select>

      <div class="d-flex gap-2" style="align-items:flex-start;">
        <button id="scanBtn" class="btn btn-accent">Start Scan</button>
        <button id="prefillBtn" class="btn btn-light">Prefill Demo</button>
        <button id="clearBtn" class="btn btn-outline-light">Clear Data</button>

        <div class="btn-group">
          <button id="exportCSV" class="btn btn-outline-light">Export CSV</button>
          <button id="exportJSON" class="btn btn-outline-light">Export JSON</button>
        </div>

        <label class="btn btn-outline-light mb-0">Import CSV <input id="importFile" type="file" accept=".csv" hidden></label>
      </div>
    </div>

    <div class="d-flex gap-2 mt-2" style="align-items:center;flex-wrap:wrap;">
      <div class="help">Tip: Use commas or new lines to add many URLs. Press <kbd>Ctrl/Cmd + Enter</kbd> to start scan.</div>
      <div class="ms-auto"><span id="statsChip" class="chip">Total: 0 • High: 0 • Medium: 0 • Low: 0</span></div>
    </div>
  </section>

  <!-- Filters -->
  <section class="card-panel" aria-labelledby="filters-heading">
    <h3 id="filters-heading" class="kicker">Filters & Search</h3>
    <div class="d-flex gap-2 align-items-center" style="flex-wrap:wrap;">
      <select id="filterRisk" class="form-select form-select-sm" style="max-width:160px;">
        <option value="">All Risks</option><option>High</option><option>Medium</option><option>Low</option>
      </select>

      <select id="filterVuln" class="form-select form-select-sm" style="max-width:220px;">
        <option value="">All Attack Types</option>
      </select>

      <input id="search" class="form-control form-control-sm search-input" placeholder="Search URL or notes">

      <button id="resetFilters" class="btn btn-outline-light btn-sm">Reset</button>

      <div class="ms-auto help">Click on chart segments to filter</div>
    </div>
  </section>

  <!-- Results & Charts -->
  <section class="card-panel" aria-labelledby="results-heading">
    <h3 id="results-heading" class="kicker">Results & Visuals</h3>
    <div class="row gy-3">
      <div class="col-12 col-lg-7">
        <div class="card-panel" style="padding:8px;">
          <div class="d-flex justify-content-between align-items-center mb-2">
            <strong>Scan Results</strong>
            <div class="small-muted">Click headers to sort • per-row actions</div>
          </div>
          <div class="table-wrap" style="max-height:420px; overflow:auto;">
            <table id="resultsTable" class="table table-sm table-dark align-middle mb-0">
              <thead>
                <tr>
                  <th data-key="idx" class="nowrap">#</th>
                  <th data-key="url">URL</th>
                  <th data-key="vuln">Attack Type</th>
                  <th data-key="risk">Risk</th>
                  <th data-key="timestamp" class="muted-small">When</th>
                  <th class="col-actions">Actions</th>
                </tr>
              </thead>
              <tbody></tbody>
            </table>
          </div>
        </div>

        <div class="d-flex gap-2 mt-2">
          <button id="selectAll" class="btn btn-outline-light btn-sm">Select All</button>
          <button id="deselectAll" class="btn btn-outline-light btn-sm">Deselect</button>
          <button id="bulkDelete" class="btn btn-danger btn-sm">Delete Selected</button>
          <div class="small-muted ms-auto">Selected <span id="selCount">0</span></div>
        </div>
      </div>

      <div class="col-12 col-lg-5">
        <div class="card-panel chart-box mb-3">
          <strong>Risk Distribution</strong>
          <canvas id="riskChart" style="width:100%;height:100%"></canvas>
        </div>
        <div class="card-panel chart-box">
          <strong>Attack Types</strong>
          <canvas id="typeChart" style="width:100%;height:100%"></canvas>
        </div>
      </div>
    </div>
  </section>

  <section class="card-panel small-muted">
    <div><strong>Note:</strong> This simulator is for education only. Do not use on systems you do not own or have permission to test.</div>
  </section>
</div>

<!-- Ethics modal -->
<div class="modal fade" id="ethicsModal" tabindex="-1" aria-labelledby="ethicsLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header"><h5 id="ethicsLabel">Ethics & Responsible Use</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div>
      <div class="modal-body">
        <p>This tool is strictly educational. Never scan or attack systems without explicit permission.</p>
        <ul>
          <li>Use only in test/lab environments or with written permission.</li>
          <li>Follow responsible disclosure for real findings.</li>
        </ul>
      </div>
      <div class="modal-footer"><button class="btn btn-accent" data-bs-dismiss="modal">Understood</button></div>
    </div>
  </div>
</div>

<!-- Bootstrap bundle -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

<script>
/* ===========================
   App initialization & state
   =========================== */
const E = {
  urlInput: document.getElementById('urlInput'),
  scenario: document.getElementById('scenario'),
  scanBtn: document.getElementById('scanBtn'),
  prefillBtn: document.getElementById('prefillBtn'),
  clearBtn: document.getElementById('clearBtn'),
  importFile: document.getElementById('importFile'),
  exportCSV: document.getElementById('exportCSV'),
  exportJSON: document.getElementById('exportJSON'),
  filterRisk: document.getElementById('filterRisk'),
  filterVuln: document.getElementById('filterVuln'),
  search: document.getElementById('search'),
  resetFilters: document.getElementById('resetFilters'),
  resultsTableBody: document.querySelector('#resultsTable tbody'),
  statsChip: document.getElementById('statsChip'),
  selCount: document.getElementById('selCount'),
  selectAll: document.getElementById('selectAll'),
  deselectAll: document.getElementById('deselectAll'),
  bulkDelete: document.getElementById('bulkDelete'),
  themeToggle: document.getElementById('themeToggle'),
  scanBtnEl: document.getElementById('scanBtn'),
};

const ctxRisk = document.getElementById('riskChart').getContext('2d');
const ctxType = document.getElementById('typeChart').getContext('2d');

let DATA = []; // {id,url,vuln,score,risk,details,timestamp,note,selected}
let FILTERED = [];
let SORT = { key: 'timestamp', dir: 'desc' };
let RISK_CHART = null, TYPE_CHART = null;

const LS_KEY = 'sih_vapt_pro_v2';
const LS_THEME = 'sih_theme_vapt_v2';

function uid(prefix='id'){ return prefix + '_' + Math.random().toString(36).slice(2,9); }
function nowISO(){ return new Date().toISOString(); }
function fmtDate(iso){ try{ return new Date(iso).toLocaleString(); }catch(e){return iso;} }
function escapeHtml(s){ if(!s) return ''; return String(s).replace(/[&<>"']/g, ch => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[ch])); }

function saveData(){ try{ localStorage.setItem(LS_KEY, JSON.stringify(DATA)); }catch(e){ console.warn('save error', e); } }
function loadData(){ try{ const raw = localStorage.getItem(LS_KEY); if(raw) DATA = JSON.parse(raw) || []; }catch(e){ console.warn('load error', e); DATA = []; } }

function applyTheme(){ const t = localStorage.getItem(LS_THEME) || 'dark'; if(t==='light') document.body.classList.add('light-mode'); else document.body.classList.remove('light-mode'); }
applyTheme();
E.themeToggle.addEventListener('click', ()=>{ document.body.classList.toggle('light-mode'); localStorage.setItem(LS_THEME, document.body.classList.contains('light-mode') ? 'light' : 'dark'); });

/* ===========================
   Detection engine (extended)
   =========================== */
function detectVulnAndScore(url, scenario='') {
  if(!url || typeof url !== 'string') return {vuln:'Unknown',score:0,risk:'Low',details:[]};
  const u = url.toLowerCase();
  const scores = {
    'SQL Injection':0,'XSS':0,'SSRF':0,'Directory Traversal':0,'RCE':0,'LFI':0,'RFI':0,
    'Open Redirect':0,'Command Injection':0,'IDOR':0,'XXE':0,'LDAP Injection':0,'Template Injection':0,
    'Host Header Injection':0,'HPP':0,'CRLF Injection':0,'CSRF':0,'Unknown':0
  };
  const details = [];
  const scenarioBias = {'SQLi heavy':{'SQL Injection':2},'XSS heavy':{'XSS':2},'SSRF focused':{'SSRF':2},'Dir Traversal focused':{'Directory Traversal':2},'RCE heavy':{'RCE':2}};
  if(scenario && scenarioBias[scenario]) Object.keys(scenarioBias[scenario]).forEach(k=>scores[k]+=scenarioBias[scenario][k]);

  // patterns
  if(/(\%27)|(\')|(\-\-)|union\+select|(\bselect\b|\binsert\b|\bdelete\b|\bdrop\b|\bupdate\b)/i.test(url)) { scores['SQL Injection']+=3; details.push('sql-pattern'); }
  if(/<script\b|%3cscript|onerror=|onload=|javascript:/i.test(url)) { scores['XSS']+=3; details.push('xss'); }
  if(/127\.0\.0\.1|localhost|169\.254\.169\.254|file:\/\//i.test(url)) { scores['SSRF']+=3; details.push('ssrf'); }
  if(/(\.\.\/)|(%2e%2e\/)/i.test(url)) { scores['Directory Traversal']+=3; details.push('traversal'); }
  if(/eval\(|system\(|exec\(|passthru\(|shell_exec\(|popen\(/i.test(url)) { scores['RCE']+=2; details.push('rce-like'); }
  if(/etc\/passwd|boot\.ini|windows\\system32/i.test(url)) { scores['LFI']+=3; details.push('lfi-sensitive'); }
  if(/https?:\/\/.*\.(php|txt|asp|jsp|py)(\?|$)/i.test(url) && /include|require|file_get_contents|fopen|curl_exec/i.test(url)) { scores['RFI']+=2; details.push('rfi'); }
  if(/[?&](redirect|url|next|dest|goto)=https?:\/\//i.test(url)) { scores['Open Redirect']+=2; details.push('open-redirect'); }
  if(/;|\||`|\$\(.*\)|\$\{.*\}/i.test(url)) { scores['Command Injection']+=3; details.push('cmd-inj'); }
  if(/[?&]id=\d+/i.test(url) && !/select|join|where/i.test(url)) { scores['IDOR']+=1; details.push('idor-like'); }
  if(/<!DOCTYPE\s+ENTITY|<!ENTITY|%3C!ENTITY%3E|%3C\?xml/i.test(url)) { scores['XXE']+=2; details.push('xxe'); }
  if(/ldap(s)?:\/\/|\\\bldap\b/i.test(url)) { scores['LDAP Injection']+=1; details.push('ldap'); }
  if(/{{.*}}|%7B%7B.*%7D%7D|Jinja2|Twig|Handlebars|EJS/i.test(url)) { scores['Template Injection']+=2; details.push('ssti'); }
  if(/host=|x-forwarded-host=|x-forwarded-proto=/i.test(url)) { scores['Host Header Injection']+=1; details.push('host-header'); }
  if(hasDuplicateParams(url)) { scores['HPP']+=2; details.push('hpp'); }
  if(/%0d%0a|%0a%0d|\r\n|\n\r/.test(url)) { scores['CRLF Injection']+=2; details.push('crlf'); }
  if(/csrf_token|authenticity_token|_csrf|csrfmiddlewaretoken/i.test(url)) { scores['CSRF']+=1; details.push('csrf-token'); }
  if(/%27|%22|%3C|%3E|<|>/.test(url)) { scores['XSS'] += 1; }

  // small generic suspicious boost
  if(/exec\(|eval\(|base64_decode|system\(|passthru\(/i.test(url)) { scores['RCE']++; scores['Command Injection']++; }

  // pick top
  const entries = Object.entries(scores).sort((a,b)=>b[1]-a[1]);
  let top = entries[0];
  if(top[1] === 0) {
    const f = entries.find(e=>e[1]>0);
    if(f) top = f;
  }
  let vulnName = top[0];
  const score = top[1];
  if(score === 0) vulnName = 'Unknown';
  let risk = 'Low';
  if(score >= 6) risk = 'High';
  else if(score >= 3) risk = 'Medium';
  else if(score >= 1) risk = 'Low';
  return { vuln: vulnName, score, risk, details };
}

function hasDuplicateParams(urlStr){
  try{
    const tmp = new URL(urlStr, 'http://example.invalid');
    const names = [];
    for(const [k] of tmp.searchParams) names.push(k);
    return names.length !== (new Set(names)).size;
  }catch(e){
    const q = (urlStr.split('?')[1]||'').split('#')[0]; if(!q) return false;
    const parts = q.split('&').map(p=>p.split('=')[0]); return parts.length !== (new Set(parts)).size;
  }
}

/* ===========================
   CRUD and Render
   =========================== */
function addUrlsFromInput(inputText, scenarioBias=''){
  if(!inputText || typeof inputText !== 'string') return [];
  const cand = inputText.split(/[\n,]+/).map(s=>s.trim()).filter(Boolean);
  const added = [];
  for(const c of cand){
    if(DATA.find(d=>d.url.toLowerCase()===c.toLowerCase())) continue;
    const det = detectVulnAndScore(c, scenarioBias);
    const rec = { id: uid('e'), url:c, vuln:det.vuln, score:det.score, risk:det.risk, details:det.details, timestamp:nowISO(), note:'', selected:false };
    DATA.push(rec);
    added.push(rec);
  }
  if(added.length) saveData();
  return added;
}

function renderTable(){
  const rf = E.filterRisk.value;
  const vf = E.filterVuln.value;
  const q = (E.search.value||'').toLowerCase().trim();
  FILTERED = DATA.filter(d=>{
    if(rf && d.risk !== rf) return false;
    if(vf && d.vuln !== vf) return false;
    if(q){
      return (d.url && d.url.toLowerCase().includes(q)) || (d.note && d.note.toLowerCase().includes(q)) || (d.details && d.details.join(' ').toLowerCase().includes(q));
    }
    return true;
  });

  const key = SORT.key;
  const dir = SORT.dir === 'asc' ? 1 : -1;
  FILTERED.sort((a,b)=>{
    let va = a[key] || '', vb = b[key] || '';
    if(key === 'timestamp') { va = a.timestamp; vb = b.timestamp; }
    if(key === 'idx') return dir * (DATA.indexOf(a) - DATA.indexOf(b));
    return dir * String(va).localeCompare(String(vb));
  });

  E.resultsTableBody.innerHTML = '';
  FILTERED.forEach((d,i)=>{
    const tr = document.createElement('tr'); tr.dataset.id = d.id;
    const when = fmtDate(d.timestamp);
    tr.innerHTML = `
      <td class="nowrap text-muted small">${i+1}</td>
      <td style="min-width:220px;max-width:520px;"><div class="nowrap" title="${escapeHtml(d.url)}">${escapeHtml(d.url)}</div></td>
      <td class="nowrap">${escapeHtml(d.vuln)}</td>
      <td class="nowrap"><span class="${d.risk==='High'?'badge-high':d.risk==='Medium'?'badge-med':'badge-low'}" style="padding:6px 8px;border-radius:6px;">${escapeHtml(d.risk)}</span></td>
      <td class="muted-small nowrap">${escapeHtml(when)}</td>
      <td>
        <div class="d-flex gap-1 align-items-center">
          <input type="checkbox" class="select-row" data-id="${d.id}" ${d.selected? 'checked':''} title="Select row">
          <button class="btn btn-sm btn-outline-light icon-btn" data-action="rescan" data-id="${d.id}" title="Rescan">🔄</button>
          <button class="btn btn-sm btn-outline-light icon-btn" data-action="note" data-id="${d.id}" title="Add note">📝</button>
          <button class="btn btn-sm btn-danger icon-btn" data-action="delete" data-id="${d.id}" title="Delete">🗑️</button>
        </div>
      </td>
    `;
    E.resultsTableBody.appendChild(tr);
  });

  updateStatsUI();
  updateCharts();
  populateVulnFilterIfNeeded();
  updateSelectCount();
}

/* ===========================
   Charts
   =========================== */
function updateCharts(){
  const riskCounts = { High:0, Medium:0, Low:0 };
  const typeCounts = {};
  DATA.forEach(d=>{ riskCounts[d.risk] = (riskCounts[d.risk]||0) +1; typeCounts[d.vuln]= (typeCounts[d.vuln]||0)+1; });

  // risk chart
  try{
    if(RISK_CHART) RISK_CHART.destroy();
    RISK_CHART = new Chart(ctxRisk, {
      type:'doughnut',
      data:{ labels:['High','Medium','Low'], datasets:[{ data:[riskCounts.High,riskCounts.Medium,riskCounts.Low], backgroundColor:['#ff6b6b','#ffb86b','#7ef0b5'] }] },
      options:{ responsive:true, maintainAspectRatio:false, onClick:(e,items)=>{ if(items.length){ const label = RISK_CHART.data.labels[items[0].index]; E.filterRisk.value = label; renderTable(); } } }
    });
  }catch(err){ console.warn('risk chart', err); }

  // type chart
  try{
    const labels = Object.keys(typeCounts).filter(k=>k && typeCounts[k]>0);
    const values = labels.map(l=>typeCounts[l]);
    if(TYPE_CHART) TYPE_CHART.destroy();
    TYPE_CHART = new Chart(ctxType, {
      type:'bar',
      data:{ labels, datasets:[{ label:'Occurrences', data:values, backgroundColor:'#00d47a' }] },
      options:{ responsive:true, maintainAspectRatio:false, onClick:(e,items)=>{ if(items.length){ const idx = items[0].index; E.filterVuln.value = labels[idx] || ''; renderTable(); } }, scales:{ y:{ beginAtZero:true, precision:0 } } }
    });
  }catch(err){ console.warn('type chart', err); }
}

/* ===========================
   Filters population
   =========================== */
let vulnFilterCached = '';
function populateVulnFilterIfNeeded(){
  const s = new Set(DATA.map(d=>d.vuln).filter(Boolean));
  const key = Array.from(s).sort().join('|');
  if(key === vulnFilterCached) return;
  vulnFilterCached = key;
  const opts = ['<option value="">All Attack Types</option>'];
  Array.from(s).sort().forEach(v => opts.push(`<option>${escapeHtml(v)}</option>`));
  E.filterVuln.innerHTML = opts.join('');
}

/* ===========================
   Row actions + selection handling
   =========================== */
// Delegated click for buttons and delegated change for checkboxes
E.resultsTableBody.addEventListener('click', (ev)=>{
  const btn = ev.target.closest('button');
  if(btn){
    const action = btn.getAttribute('data-action');
    const id = btn.getAttribute('data-id');
    handleRowAction(action, id);
    return;
  }
});

E.resultsTableBody.addEventListener('change', (ev)=>{
  const cb = ev.target.closest('input.select-row');
  if(cb){
    const id = cb.getAttribute('data-id');
    const rec = DATA.find(d=>d.id===id);
    if(rec){ rec.selected = !!cb.checked; saveData(); updateSelectCount(); }
  }
});

function handleRowAction(action, id){
  const rec = DATA.find(d=>d.id===id);
  if(!rec) return;
  if(action==='rescan'){
    const det = detectVulnAndScore(rec.url, E.scenario.value || '');
    rec.vuln = det.vuln; rec.score = det.score; rec.risk = det.risk; rec.details = det.details; rec.timestamp = nowISO();
    saveData(); renderTable();
  } else if(action==='note'){
    const newNote = prompt('Add/Edit note (local only):', rec.note || '');
    if(newNote !== null){ rec.note = newNote; saveData(); renderTable(); }
  } else if(action==='delete'){
    if(!confirm('Delete this entry?')) return;
    DATA = DATA.filter(d=>d.id!==id);
    saveData(); renderTable();
  }
}

/* Select all / deselect / bulk delete */
document.getElementById('selectAll').addEventListener('click', ()=>{
  DATA.forEach(d=>d.selected = true); saveData(); renderTable(); updateSelectCount();
});
document.getElementById('deselectAll').addEventListener('click', ()=>{
  DATA.forEach(d=>d.selected = false); saveData(); renderTable(); updateSelectCount();
});
document.getElementById('bulkDelete').addEventListener('click', ()=>{
  const selectedCount = DATA.filter(d=>d.selected).length;
  if(selectedCount === 0){ alert('No items selected'); return; }
  if(!confirm(`Delete ${selectedCount} selected entr${selectedCount>1?'ies':'y'}?`)) return;
  DATA = DATA.filter(d=>!d.selected);
  saveData(); renderTable(); updateSelectCount();
});

/* update select count UI */
function updateSelectCount(){ E.selCount.textContent = String(DATA.filter(d=>d.selected).length || 0); }

/* ===========================
   Import / Export
   =========================== */
E.importFile.addEventListener('change', (ev)=>{
  const file = ev.target.files && ev.target.files[0];
  if(!file) return;
  const reader = new FileReader();
  reader.onload = e=>{
    parseCSVImport(e.target.result);
    E.importFile.value = '';
  };
  reader.onerror = err => { alert('Read error'); console.warn(err); };
  reader.readAsText(file);
});

function parseCSVImport(text){
  if(!text) return;
  const lines = text.split(/\r?\n/).map(l=>l.trim()).filter(Boolean);
  if(lines.length === 0) return;
  const header = lines[0].split(',').map(h=>h.trim().toLowerCase());
  const hasUrl = header.includes('url');
  if(hasUrl){
    for(let i=1;i<lines.length;i++){
      const parts = splitCSVLine(lines[i]);
      const obj = {};
      header.forEach((h,idx)=> obj[h] = parts[idx] || '');
      if(!obj.url) continue;
      if(DATA.find(d=>d.url.toLowerCase()===obj.url.toLowerCase())) continue;
      const det = detectVulnAndScore(obj.url, E.scenario.value || '');
      const rec = { id: uid('imp'), url: obj.url, vuln: obj.vuln || det.vuln, score: det.score, risk: obj.risk || det.risk, details: det.details, timestamp: obj.timestamp || nowISO(), note: obj.note || '', selected:false };
      DATA.push(rec);
    }
  } else {
    lines.forEach(l=>{
      if(DATA.find(d=>d.url.toLowerCase()===l.toLowerCase())) return;
      const det = detectVulnAndScore(l, E.scenario.value || '');
      DATA.push({ id: uid('imp'), url:l, vuln:det.vuln, score:det.score, risk:det.risk, details:det.details, timestamp: nowISO(), note:'', selected:false });
    });
  }
  saveData(); renderTable();
}

/* CSV line split supporting quotes */
function splitCSVLine(line){
  const res = []; let cur=''; let inQ=false;
  for(let i=0;i<line.length;i++){
    const ch = line[i];
    if(ch === '"'){ if(inQ && line[i+1] === '"'){ cur+='"'; i++; continue; } inQ = !inQ; continue;}
    if(ch === ',' && !inQ){ res.push(cur); cur=''; continue;}
    cur += ch;
  }
  res.push(cur); return res.map(s=>s.trim());
}

E.exportCSV.addEventListener('click', ()=>{
  if(DATA.length === 0){ alert('No data to export'); return; }
  const headers = ['url','vuln','risk','timestamp','note'];
  const rows = DATA.map(d => headers.map(h => `"${String(d[h]||'').replace(/"/g,'""')}"`).join(','));
  const csv = [headers.join(','), ...rows].join('\n');
  downloadBlob(csv, 'text/csv', `url_vapt_export_${(new Date()).toISOString().slice(0,10)}.csv`);
});

E.exportJSON.addEventListener('click', ()=>{
  if(DATA.length === 0){ alert('No data to export'); return; }
  const json = JSON.stringify(DATA, null, 2);
  downloadBlob(json, 'application/json', `url_vapt_export_${(new Date()).toISOString().slice(0,10)}.json`);
});

function downloadBlob(content, type, filename){
  const blob = new Blob([content], { type });
  const a = document.createElement('a');
  a.href = URL.createObjectURL(blob);
  a.download = filename;
  a.click();
  URL.revokeObjectURL(a.href);
}

/* ===========================
   Scanning flow (non-blocking)
   =========================== */
E.scanBtn.addEventListener('click', runScan);
E.urlInput = E.urlInput || document.getElementById('urlInput');
E.urlInput.addEventListener('keydown', (ev)=>{ if(ev.key === 'Enter' && (ev.ctrlKey || ev.metaKey)){ ev.preventDefault(); runScan(); } });

E.prefillBtn.addEventListener('click', ()=> {
  E.urlInput.value = [
    "https://example.com?id=1' OR '1'='1",
    "https://testsite.local/search?q=<script>alert(1)</script>",
    "/admin.php?file=../../etc/passwd",
    "http://127.0.0.1:5000/endpoint?callback=http://attacker.example/collect",
    "https://vuln.site/redirect?url=https://evil.example.com",
    "https://app.example.com/template/{{7*7}}",
    "http://example.com/?id=100",
    "https://xml.example.com/?payload=%3C?xml%20version%3D%221.0%22%3E%3C!ENTITY%20xxe%20SYSTEM%20%22file:///etc/passwd%22%3E"
  ].join(",\n");
});

E.clearBtn.addEventListener('click', ()=> {
  if(!confirm('Clear ALL stored scan results? This cannot be undone.')) return;
  DATA = []; saveData(); renderTable();
});

async function runScan(){
  const input = E.urlInput.value.trim();
  if(!input){ alert('Please enter one or more URLs'); return; }
  const items = input.split(/[\n,]+/).map(s=>s.trim()).filter(Boolean);
  if(items.length === 0){ alert('No valid items'); return; }
  for(let i=0;i<items.length;i++){
    const u = items[i];
    await sleep(60 + Math.random()*140);
    addUrlsFromInput(u, E.scenario.value || '');
    renderTable();
  }
  E.urlInput.value = '';
  // small success hint
  // alert(`${items.length} items scanned`); // optional
}

function sleep(ms){ return new Promise(r => setTimeout(r, ms)); }

/* ===========================
   Sorting headers
   =========================== */
document.querySelectorAll('#resultsTable thead th').forEach(th=>{
  th.style.cursor = 'pointer';
  th.addEventListener('click', ()=>{
    const key = th.getAttribute('data-key') || 'url';
    if(SORT.key === key) SORT.dir = SORT.dir === 'asc' ? 'desc' : 'asc';
    else { SORT.key = key; SORT.dir = 'asc'; }
    renderTable();
  });
});

/* ===========================
   Filters handlers
   =========================== */
E.filterRisk.addEventListener('change', renderTable);
E.filterVuln.addEventListener('change', renderTable);
E.search.addEventListener('input', renderTable);
E.resetFilters.addEventListener('click', ()=>{ E.filterRisk.value=''; E.filterVuln.value=''; E.search.value=''; renderTable(); });

/* ===========================
   Stats & init
   =========================== */
function updateStatsUI(){ const total = DATA.length, high = DATA.filter(d=>d.risk==='High').length, med = DATA.filter(d=>d.risk==='Medium').length, low = DATA.filter(d=>d.risk==='Low').length; E.statsChip.textContent = `Total: ${total} • High: ${high} • Medium: ${med} • Low: ${low}`; }
function updateSelectCount(){ E.selCount.textContent = String(DATA.filter(d=>d.selected).length || 0); }

function init(){
  loadData();
  if(!Array.isArray(DATA)) DATA = [];
  DATA.forEach(d=>{ if(typeof d.selected==='undefined') d.selected = false; });
  renderTable();
  updateSelectCount();
}
init();

</script>

</body>
</html>
